{"version":3,"sources":["component/user_interface/bg_player.png","component/header/Header.tsx","component/user_interface/VideoPlayer.tsx","component/counter/Counter.tsx","component/action/ActionList.tsx","component/user_interface/UserInterface.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Header","AppContext","Consumer","context","className","id","streamerName","toUpperCase","VideoPlayer","ActionContext","actionState","appState","src","Player_image","style","filter","data","resolution","onClick","addFame","suffix","readableNumber","notReadableNumber","index","x","Math","round","floor","parseFloat","toFixed","FameCounter","fame","famePerSecond","ActionList","appContext","resource","follower","resourceKey","enabled","cost","subscriber","valueOf","embedded","sponsor","Upgrade","action","color","setResolution","Action","props","actionContext","addFameForAction","label","count","baseReward","UserInterface","width","Reset","reset","nextActionResource","actionResource","ceil","coefficient","initialAppState","initialActionState","save","setInterval","addFamePerSec","resourceName","loadState","localStorageState","localStorage","getItem","clear","JSON","parse","React","createContext","App","state","setState","setItem","stringify","newState","render","Provider","value","Component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gHAAAA,EAAOC,QAAU,IAA0B,uC,iRCI9BC,G,kBAAS,kBAClB,kBAACC,EAAWC,SAAZ,MACK,SAAAC,GAAO,OAAI,yBAAKC,UAAU,YACvB,0BAAMC,GAAG,iBAAiBF,EAAQG,aAAaC,eAC/C,0BAAMF,GAAG,QAAT,QACA,yC,wBCHCG,EAAc,kBACvB,kBAACC,EAAcP,SAAf,MAEQ,SAAAQ,GAAW,OACP,kBAACT,EAAWC,SAAZ,MACK,SAAAS,GAAQ,OACL,yBAAKC,IAAKC,IAAcC,MAAO,CAACC,OAAO,QAAD,OAAU,KAAOJ,EAASK,KAAKC,WAAa,EAA5C,QAAqDb,UAAU,SAChGc,QAAS,kBAAMR,EAAYS,oBCTlDC,G,MAAS,CAAC,GAAI,UAAW,UAAW,WACtC,cAAe,cAAe,aAC9B,YAAa,YAAa,YAC1B,cAESC,EAAiB,SAACC,GAC3B,IAAIC,EAAQ,EACRC,EAAIF,EACR,GAAIE,EAAI,EAAG,MAAM,GAAN,OAAUC,KAAKC,MAAMF,GAArB,YAA2BJ,EAAOG,IAC7C,GAAIC,EAAI,IAAU,MAAM,GAAN,OAAUC,KAAKE,MAAMH,GAArB,YAA2BJ,EAAOG,IAGpD,IAFAC,EAAIF,EAAoB,IACxBC,GAAS,EACFC,GAAK,KACRA,GAAQ,IACRD,GAAS,EAEb,MAAM,GAAN,OAAUK,WAAWJ,EAAEK,QAAQ,IAA/B,YAAsCT,EAAOG,KAGpCO,EAAc,kBACvB,kBAAC7B,EAAWC,SAAZ,MACK,SAAAC,GACG,OAAO,yBAAKC,UAAU,WAClB,2BAAIiB,EAAelB,EAAQ4B,MAA3B,SACA,uBAAG1B,GAAG,gBAAgBgB,EAAelB,EAAQ6B,eAA7C,oBCvBHC,G,MAAa,kBACtB,kBAAChC,EAAWC,SAAZ,MAEQ,SAAAgC,GAAU,OAAI,6BACV,yBAAK9B,UAAU,eACX,kBAAC,EAAD,CAAQ+B,SAAUD,EAAWE,SACrBC,YAAa,WACbC,QAASJ,EAAWH,MAAQG,EAAWE,SAASG,OACxD,kBAAC,EAAD,CAAQJ,SAAUD,EAAWM,WACrBH,YAAa,aACbC,QAASJ,EAAWH,KAAKU,WAAaP,EAAWM,WAAWD,OACpE,kBAAC,EAAD,CAAQJ,SAAUD,EAAWQ,SACrBL,YAAa,WACbC,QAASJ,EAAWH,KAAKU,WAAaP,EAAWQ,SAASH,OAClE,kBAAC,EAAD,CAAQJ,SAAUD,EAAWS,QACrBN,YAAa,UACbC,QAASJ,EAAWH,KAAKU,WAAaP,EAAWS,QAAQJ,QAErE,yBAAKnC,UAAU,gBACX,kBAAC,EAAD,aAYdwC,EAAU,WACZ,OAAM,kBAACnC,EAAcP,SAAf,MACD,SAAA2C,GAAM,OAAI,yBAAK/B,MAAO,CAACgC,MAAO,UAC3B,uBAAG5B,QAAS,kBAAM2B,EAAOE,cAAc,OAAvC,QACA,uBAAG7B,QAAS,kBAAM2B,EAAOE,cAAc,OAAvC,QACA,uBAAG7B,QAAS,kBAAM2B,EAAOE,cAAc,OAAvC,QACA,uBAAG7B,QAAS,kBAAM2B,EAAOE,cAAc,OAAvC,QACA,uBAAG7B,QAAS,kBAAM2B,EAAOE,cAAc,QAAvC,SACA,uBAAG7B,QAAS,kBAAM2B,EAAOE,cAAc,QAAvC,WAKNC,EAAS,SAACC,GAAD,OACX,kBAACxC,EAAcP,SAAf,MACK,SAAAgD,GAAa,OAAI,yBAAK9C,UAAU,UAC7B,yBAAKA,UAAS,cAAS6C,EAAMX,QAAU,UAAY,YAC9CpB,QAAS,kBAAM+B,EAAMX,QAAUY,EAAcC,iBAAiBF,EAAMZ,aAAe,OACpF,yBAAKjC,UAAU,SACX,8BAAO6C,EAAMd,SAASiB,QAE1B,yBAAKhD,UAAU,QACX,8BAAOiB,EAAe4B,EAAMd,SAASI,SAG7C,yBAAKnC,UAAU,QACX,uCACc6C,EAAMd,SAASkB,MAD7B,IACqCJ,EAAMd,SAASiB,MADpD,IAC2D,6BAD3D,iBAEmBH,EAAMd,SAASmB,WAFlC,eAEyD,6BACpDL,EAAMd,SAASkB,MAHpB,IAG4BJ,EAAMd,SAASiB,MAH3C,cAG6D/B,EAAe4B,EAAMd,SAASkB,MAAQJ,EAAMd,SAASmB,YAHlH,qBCtDHC,EAAgB,kBACzB,yBAAKnD,UAAU,kBACX,yBAAKA,UAAU,OACX,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEJ,yBAAKA,UAAU,UACX,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,yBAAKU,MAAO,CAAC0C,MAAO,WAExB,yBAAKpD,UAAU,aAIjBqD,EAAQ,WACV,OAAO,kBAAChD,EAAcP,SAAf,MACF,gBAAEwD,EAAF,EAAEA,MAAF,OAAa,0BAAM5C,MAAO,CAAC0C,MAAO,OAAQV,MAAO,SAAU5B,QAAS,kBAAMwC,MAA7D,aCXhBC,EAAqB,SAACC,GAAD,mBAAC,eACrBA,GADoB,IAEvBrB,KAAMd,KAAKoC,KAAKD,EAAerB,KAAOqB,EAAeE,aACrDT,MAAOO,EAAeP,MAAQ,KAiC5BU,EAA4B,CAC9BhC,KAAM,EACNC,cAAe,EACfhB,KApBsB,CACtBC,WAAY,KAoBZX,aAAc,WACd8B,SAAU,CAAC0B,YAAa,IAAKvB,KAAM,GAAIc,MAAO,EAAGC,WAAY,GAAKF,MAAO,YACzEZ,WAAY,CAACsB,YAAa,KAAMvB,KAAM,IAAKc,MAAO,EAAGC,WAAY,EAAGF,MAAO,cAC3EV,SAAU,CAACoB,YAAa,KAAMvB,KAAM,KAAMc,MAAO,EAAGC,WAAY,EAAGF,MAAO,YAC1ET,QAAS,CAACmB,YAAa,KAAMvB,KAAM,KAAOc,MAAO,EAAGC,WAAY,GAAIF,MAAO,YAGzEY,EAAkC,CACpCN,MADoC,aAGpCX,cAHoC,SAGtB9B,KAEdgD,KAAMC,aAAY,cACf,GACHC,cAAeD,aAAY,cACxB,KACHf,iBAToC,SASnBiB,KAEjBjD,QAAS,cAIPkD,EAAY,WACd,IAAMC,EAAoBC,aAAaC,QAzE1B,eA2Eb,OADKF,GAAmBC,aAAaE,QAC9BH,EAAiB,eAAOI,KAAKC,MAAML,IAAsBP,GAGvD9D,EAAa2E,IAAMC,cAAwBd,GAC3CtD,EAAgBmE,IAAMC,cAA2Bb,GA0C/Cc,E,4MAtCXC,MAAQV,I,EAERxB,OAAS,CACLa,MAAO,WACH,EAAKsB,SAASjB,IAElBhB,cAAe,SAAC9B,GACZ,EAAK+D,SAAL,2BAAkB,EAAKD,OAAvB,IAA8B/D,KAAK,2BAAK,EAAK+D,MAAM/D,MAAjB,IAAuBC,mBAE7DgD,KAAMC,aAAY,WACdK,aAAaU,QA7FR,cA6F0BP,KAAKQ,UAAU,EAAKH,UACpD,KACHZ,cAAeD,aAAY,WACvB,EAAKc,SAAL,2BAAkB,EAAKD,OAAvB,IAA8BhD,KAAM,EAAKgD,MAAMhD,KAAO,EAAKgD,MAAM/C,cAAgB,QAClF,KACHb,QAAS,WACL,EAAK6D,SAAL,2BAAkB,EAAKD,OAAvB,IAA8BhD,KAAM,EAAKgD,MAAMhD,KAAO,MAE1DoB,iBAAkB,SAACd,GACf,IAAI8C,EAAkB,2BACf,EAAKJ,OADU,IAElBhD,KAAM,EAAKgD,MAAMhD,KAAO,EAAKgD,MAAM1C,GAAaE,KAChDP,cAAe,EAAK+C,MAAM/C,cAAgB,EAAK+C,MAAM1C,GAAaiB,aAEtE6B,EAAS9C,GAAesB,EAAmB,EAAKoB,MAAM1C,IACtD,EAAK2C,SAAL,eAAkBG,M,EAI1BC,OAAS,kBAAM,yBAAKhF,UAAU,OAC1B,kBAACK,EAAc4E,SAAf,CAAwBC,MAAO,EAAKzC,QAChC,kBAAC5C,EAAWoF,SAAZ,CAAqBC,MAAO,EAAKP,OAC7B,kBAAC,EAAD,U,YAlCEQ,aC1EEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAAST,OACP,kBAAC,IAAMU,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b80fa833.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bg_player.92adb936.png\";","import React from \"react\";\r\nimport \"./Header.css\"\r\nimport {AppContext} from \"../../App\";\r\n\r\nexport const Header = () =>\r\n    <AppContext.Consumer>\r\n        {context => <div className=\"top_left\">\r\n            <span id=\"streamer_name\">{context.streamerName.toUpperCase()}</span>\r\n            <span id=\"live\">Live</span>\r\n            <span>f</span>\r\n        </div>}\r\n    </AppContext.Consumer>\r\n","import React from \"react\";\r\nimport \"./VideoPlayer.css\"\r\nimport Player_image from \"./bg_player.png\"\r\nimport {ActionContext, AppContext} from \"../../App\";\r\n\r\n\r\nexport const VideoPlayer = () =>\r\n    <ActionContext.Consumer>\r\n        {\r\n            actionState =>\r\n                <AppContext.Consumer>\r\n                    {appState =>\r\n                        <img src={Player_image} style={{filter: `blur(${3840 / appState.data.resolution / 2}px)`}} className=\"player\"\r\n                             onClick={() => actionState.addFame()}/>}\r\n                </AppContext.Consumer>\r\n        }\r\n    </ActionContext.Consumer>","import React from \"react\";\r\nimport \"./Counter.css\"\r\nimport {AppContext} from \"../../App\";\r\n\r\nconst suffix = [\"\", \"million\", \"billion\", \"trillion\",\r\n    \"quadrillion\", \"quintillion\", \"sextillion\",\r\n    \"septllion\", \"octillion\", \"nonillion\",\r\n    \"decillion\"]\r\n\r\nexport const readableNumber = (notReadableNumber: number): string => {\r\n    let index = 0\r\n    let x = notReadableNumber\r\n    if (x < 1) return `${Math.round(x)} ${suffix[index]}`\r\n    if (x < 1000000)  return `${Math.floor(x)} ${suffix[index]}`\r\n    x = notReadableNumber / 1000000\r\n    index += 1\r\n    while (x >= 1000) {\r\n        x = x / 1000\r\n        index += 1\r\n    }\r\n    return `${parseFloat(x.toFixed(3))} ${suffix[index]}`\r\n}\r\n\r\nexport const FameCounter = () =>\r\n    <AppContext.Consumer>\r\n        {context => {\r\n            return <div className=\"counter\">\r\n                <p>{readableNumber(context.fame)} Fame</p>\r\n                <p id=\"f_per_second\">{readableNumber(context.famePerSecond)} per second</p>\r\n            </div>\r\n        }\r\n\r\n        }\r\n    </AppContext.Consumer>","import React from \"react\";\r\nimport \"./Action.css\"\r\nimport {AppContext, ActionContext, ActionResource} from \"../../App\";\r\nimport {readableNumber} from \"../counter/Counter\";\r\n\r\nexport const ActionList = () =>\r\n    <AppContext.Consumer>\r\n        {\r\n            appContext => <div>\r\n                <div className=\"action_list\">\r\n                    <Action resource={appContext.follower}\r\n                            resourceKey={\"follower\"}\r\n                            enabled={appContext.fame >= appContext.follower.cost}/>\r\n                    <Action resource={appContext.subscriber}\r\n                            resourceKey={\"subscriber\"}\r\n                            enabled={appContext.fame.valueOf() >= appContext.subscriber.cost}/>\r\n                    <Action resource={appContext.embedded}\r\n                            resourceKey={\"embedded\"}\r\n                            enabled={appContext.fame.valueOf() >= appContext.embedded.cost}/>\r\n                    <Action resource={appContext.sponsor}\r\n                            resourceKey={\"sponsor\"}\r\n                            enabled={appContext.fame.valueOf() >= appContext.sponsor.cost}/>\r\n                </div>\r\n                <div className=\"upgrade_list\">\r\n                    <Upgrade></Upgrade>\r\n                </div>\r\n            </div>\r\n        }\r\n    </AppContext.Consumer>\r\n\r\ninterface ActionProps {\r\n    resource: ActionResource\r\n    resourceKey: string\r\n    enabled: boolean\r\n}\r\n\r\nconst Upgrade = () => {\r\n    return<ActionContext.Consumer>\r\n        {action => <div style={{color: 'white'}}>\r\n            <p onClick={() => action.setResolution(160)}>160P</p>\r\n            <p onClick={() => action.setResolution(320)}>320P</p>\r\n            <p onClick={() => action.setResolution(480)}>480P</p>\r\n            <p onClick={() => action.setResolution(720)}>720P</p>\r\n            <p onClick={() => action.setResolution(1080)}>1080P</p>\r\n            <p onClick={() => action.setResolution(3840)}>4K</p>\r\n        </div>}\r\n    </ActionContext.Consumer>\r\n}\r\n\r\nconst Action = (props: ActionProps) =>\r\n    <ActionContext.Consumer>\r\n        {actionContext => <div className=\"action\">\r\n            <div className={`box ${props.enabled ? 'enabled' : 'disabled'}`}\r\n                 onClick={() => props.enabled ? actionContext.addFameForAction(props.resourceKey) : null}>\r\n                <div className=\"title\">\r\n                    <span>{props.resource.label}</span>\r\n                </div>\r\n                <div className=\"cost\">\r\n                    <span>{readableNumber(props.resource.cost)}</span>\r\n                </div>\r\n            </div>\r\n            <div className=\"info\">\r\n                <p>\r\n                    You have {props.resource.count} {props.resource.label}.<br/>\r\n                    Each produces {props.resource.baseReward} per second.<br/>\r\n                    {props.resource.count} {props.resource.label} producing {readableNumber(props.resource.count * props.resource.baseReward)} per\r\n                    second\r\n                </p>\r\n            </div>\r\n        </div>\r\n        }\r\n    </ActionContext.Consumer>","import React from \"react\";\r\nimport \"./UserInterface.css\"\r\nimport {Header} from \"../header/Header\";\r\nimport {VideoPlayer} from \"./VideoPlayer\";\r\nimport {FameCounter} from \"../counter/Counter\";\r\nimport {ActionList} from \"../action/ActionList\";\r\nimport {ActionContext} from \"../../App\";\r\n\r\nexport const UserInterface = () =>\r\n    <div className=\"user_interface\">\r\n        <div className=\"top\">\r\n            <Header/>\r\n            <FameCounter/>\r\n            <Reset/>\r\n        </div>\r\n        <div className=\"middle\">\r\n            <ActionList/>\r\n            <VideoPlayer/>\r\n            <div style={{width: \"15vw\"}}/>\r\n        </div>\r\n        <div className=\"bottom\">\r\n        </div>\r\n    </div>\r\n\r\nconst Reset = () => {\r\n    return <ActionContext.Consumer>\r\n        {({reset}) => <span style={{width: '100%', color: 'white'}} onClick={() => reset()}>RESET</span>}\r\n    </ActionContext.Consumer>\r\n}\r\n","import React, {Component, useEffect, useState} from 'react';\nimport './App.css';\nimport {UserInterface} from \"./component/user_interface/UserInterface\";\n\n\nconst SAVE_KEY = 'new_state_7';\n\nexport interface ActionResource {\n    label: string;\n    count: number;\n    cost: number;\n    coefficient: number;\n    baseReward: number;\n}\n\nconst nextActionResource = (actionResource: ActionResource) => ({\n    ...actionResource,\n    cost: Math.ceil(actionResource.cost * actionResource.coefficient),\n    count: actionResource.count + 1\n})\n\nexport interface ActionState {\n    reset: () => void\n    setResolution: (resolution: number) => void\n    save: NodeJS.Timeout\n    addFamePerSec: NodeJS.Timeout\n    addFame: () => void\n    addFameForAction: (resourceName: string) => void\n}\n\nexport interface Data {\n    resolution: number;\n}\n\nconst initialData: Data = {\n    resolution: 144\n}\n\nexport interface AppState {\n    streamerName: string\n    fame: number\n    famePerSecond: number\n    data: Data\n    subscriber: ActionResource\n    follower: ActionResource\n    embedded: ActionResource\n    sponsor: ActionResource\n\n    [key: string]: any\n}\n\nconst initialAppState: AppState = {\n    fame: 0,\n    famePerSecond: 0,\n    data: initialData,\n    streamerName: 'GwaDoush',\n    follower: {coefficient: 1.2, cost: 15, count: 0, baseReward: 0.1, label: \"Follower\"},\n    subscriber: {coefficient: 1.15, cost: 100, count: 0, baseReward: 1, label: \"Subscriber\"},\n    embedded: {coefficient: 1.15, cost: 1100, count: 0, baseReward: 8, label: \"Embedded\"},\n    sponsor: {coefficient: 1.15, cost: 12000, count: 0, baseReward: 47, label: \"Sponsor\"}\n}\n\nconst initialActionState: ActionState = {\n    reset(): void {\n    },\n    setResolution(resolution: number): void {\n    },\n    save: setInterval(() => {\n    }, 0),\n    addFamePerSec: setInterval(() => {\n    }, 1000),\n    addFameForAction(resourceName: string): void {\n    },\n    addFame: () => {\n    }\n}\n\nconst loadState = () => {\n    const localStorageState = localStorage.getItem(SAVE_KEY)\n    if (!localStorageState) localStorage.clear()\n    return localStorageState ? {...JSON.parse(localStorageState)} : initialAppState\n}\n\nexport const AppContext = React.createContext<AppState>(initialAppState)\nexport const ActionContext = React.createContext<ActionState>(initialActionState)\n\nclass App extends Component<any, AppState> {\n\n    state = loadState()\n\n    action = {\n        reset: () => {\n            this.setState(initialAppState);\n        },\n        setResolution: (resolution: number) => {\n            this.setState({...this.state, data: {...this.state.data, resolution}})\n        },\n        save: setInterval(() => {\n            localStorage.setItem(SAVE_KEY, JSON.stringify(this.state));\n        }, 1000),\n        addFamePerSec: setInterval(() => {\n            this.setState({...this.state, fame: this.state.fame + this.state.famePerSecond / 10})\n        }, 100),\n        addFame: () => {\n            this.setState({...this.state, fame: this.state.fame + 1})\n        },\n        addFameForAction: (resourceKey: string) => {\n            let newState: AppState = {\n                ...this.state,\n                fame: this.state.fame - this.state[resourceKey].cost,\n                famePerSecond: this.state.famePerSecond + this.state[resourceKey].baseReward,\n            }\n            newState[resourceKey] = nextActionResource(this.state[resourceKey])\n            this.setState({...newState})\n        },\n    }\n\n    render = () => <div className=\"App\">\n        <ActionContext.Provider value={this.action}>\n            <AppContext.Provider value={this.state}>\n                <UserInterface/>\n            </AppContext.Provider>\n        </ActionContext.Provider>\n    </div>\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}