{"version":3,"sources":["component/header/Header.tsx","component/user_interface/VideoPlayer.tsx","component/counter/Counter.tsx","component/action/ActionList.tsx","component/user_interface/UserInterface.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","AppContext","Consumer","context","className","id","streamerName","toUpperCase","VideoPlayer","ActionContext","actionState","onClick","addFame","FameCounter","Math","floor","fame","famePerSecond","toString","substr","ActionList","appContext","resource","follower","resourceKey","enabled","cost","subscriber","embedded","sponsor","Action","props","actionContext","addFameForAction","count","label","UserInterface","nextActionResource","actionResource","ceil","coefficient","initialAppState","baseReward","initialActionState","save","setInterval","addFamePerSec","resourceName","loadState","localStorageState","localStorage","getItem","clear","JSON","parse","React","createContext","App","state","action","setItem","stringify","setState","newState","render","Provider","value","Component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iXAIaA,G,kBAAS,kBAClB,kBAACC,EAAWC,SAAZ,MACK,SAACC,GAAD,OAAa,yBAAKC,UAAU,UACzB,0BAAMC,GAAG,SAASF,EAAQG,aAAaC,qBCHtCC,G,MAAc,kBACvB,kBAACC,EAAcP,SAAf,MAEQ,SAAAQ,GAAW,OACP,yBAAKN,UAAU,UACX,yBAAKA,UAAU,SAASO,QAAS,kBAAMD,EAAYE,mBCL1DC,G,MAAc,kBACvB,kBAACZ,EAAWC,SAAZ,MACK,SAAAC,GACG,OAAO,yBAAKC,UAAU,WAClB,2BAAIU,KAAKC,MAAMZ,EAAQa,MAAvB,SACA,uBAAGX,GAAG,gBAAgBF,EAAQc,cAAcC,WAAWC,OAAO,EAAG,GAAjE,qBCLHC,G,MAAa,kBACtB,kBAACnB,EAAWC,SAAZ,MAEQ,SAAAmB,GAAU,OAAI,oCACV,kBAAC,EAAD,CAAQC,SAAUD,EAAWE,SACrBC,YAAa,WACbC,QAASJ,EAAWL,MAAQK,EAAWE,SAASG,OACxD,kBAAC,EAAD,CAAQJ,SAAUD,EAAWM,WACrBH,YAAa,aACbC,QAASJ,EAAWL,MAAQK,EAAWM,WAAWD,OAC1D,kBAAC,EAAD,CAAQJ,SAAUD,EAAWO,SACrBJ,YAAa,WACbC,QAASJ,EAAWL,MAAQK,EAAWO,SAASF,OACxD,kBAAC,EAAD,CAAQJ,SAAUD,EAAWQ,QACrBL,YAAa,UACbC,QAASJ,EAAWL,MAAQK,EAAWQ,QAAQH,aAWjEI,EAAS,SAACC,GAAD,OACX,kBAACtB,EAAcP,SAAf,MACK,SAAA8B,GAAa,OAAI,oCACd,yBAAK5B,UAAS,qBAAgB2B,EAAMN,QAAU,UAAY,YACrDd,QAAS,kBAAMoB,EAAMN,QAAUO,EAAcC,iBAAiBF,EAAMP,aAAe,OACpF,yBAAKpB,UAAU,SACX,8BAAO2B,EAAMT,SAASY,QAE1B,yBAAK9B,UAAU,SACX,8BAAO2B,EAAMT,SAASa,QAE1B,yBAAK/B,UAAU,QACX,8BAAO2B,EAAMT,SAASI,aCnC7BU,EAAgB,kBACzB,yBAAKhC,UAAU,kBACX,kBAAC,EAAD,MAEA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCEFiC,EAAqB,SAACC,GAAD,mBAAC,eACrBA,GADoB,IAEvBZ,KAAMZ,KAAKyB,KAAKD,EAAeZ,KAAOY,EAAeE,aACrDN,MAAOI,EAAeJ,MAAQ,KAqB5BO,EAA4B,CAC9BzB,KAAM,EACNC,cAAe,EACfX,aAAc,WACdiB,SAAU,CAACiB,YAAa,IAAKd,KAAM,GAAIQ,MAAO,EAAGQ,WAAY,GAAKP,MAAO,YACzER,WAAY,CAACa,YAAa,KAAMd,KAAM,IAAKQ,MAAO,EAAGQ,WAAY,EAAGP,MAAO,cAC3EP,SAAU,CAACY,YAAa,KAAMd,KAAM,KAAMQ,MAAO,EAAGQ,WAAY,EAAGP,MAAO,YAC1EN,QAAS,CAACW,YAAa,KAAMd,KAAM,KAAOQ,MAAO,EAAGQ,WAAY,GAAIP,MAAO,YAGzEQ,EAAkC,CACpCC,KAAMC,aAAY,cACf,GACHC,cAAeD,aAAY,cACxB,KACHZ,iBALoC,SAKnBc,KAEjBnC,QAAS,cAIPoC,EAAY,WACd,IAAMC,EAAoBC,aAAaC,QAxD1B,eA0Db,OADKF,GAAmBC,aAAaE,QAC9BH,EAAiB,eAAOI,KAAKC,MAAML,IAAsBR,GAGvDxC,EAAasD,IAAMC,cAAwBf,GAC3ChC,EAAgB8C,IAAMC,cAA2Bb,GAoC/Cc,E,4MAhCXC,MAAQV,I,EAERW,OAAS,CACLf,KAAMC,aAAY,WACdK,aAAaU,QAtER,cAsE0BP,KAAKQ,UAAU,EAAKH,UACpD,KACHZ,cAAeD,aAAY,WACvB,EAAKiB,SAAL,2BAAkB,EAAKJ,OAAvB,IAA8B1C,KAAM,EAAK0C,MAAM1C,KAAO,EAAK0C,MAAMzC,cAAgB,QAClF,KACHL,QAAS,WACL,EAAKkD,SAAL,2BAAkB,EAAKJ,OAAvB,IAA8B1C,KAAM,EAAK0C,MAAM1C,KAAO,MAE1DiB,iBAAkB,SAACT,GACf,IAAIuC,EAAkB,2BACf,EAAKL,OADU,IAElB1C,KAAM,EAAK0C,MAAM1C,KAAO,EAAK0C,MAAMlC,GAAaE,KAChDT,cAAe,EAAKyC,MAAMzC,cAAgB,EAAKyC,MAAMlC,GAAakB,aAEtEqB,EAASvC,GAAea,EAAmB,EAAKqB,MAAMlC,IACtD,EAAKsC,SAAL,eAAkBC,M,EAI1BC,OAAS,kBAAM,yBAAK5D,UAAU,OAC1B,kBAACK,EAAcwD,SAAf,CAAwBC,MAAO,EAAKP,QAChC,kBAAC1D,EAAWgE,SAAZ,CAAqBC,MAAO,EAAKR,OAC7B,kBAAC,EAAD,U,YA5BES,aCzDEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAAST,OACP,kBAAC,IAAMU,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3e30f229.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Header.css\"\r\nimport {AppContext} from \"../../App\";\r\n\r\nexport const Header = () =>\r\n    <AppContext.Consumer>\r\n        {(context) => <div className=\"header\">\r\n            <span id=\"title\">{context.streamerName.toUpperCase()}</span>\r\n        </div>\r\n        }\r\n    </AppContext.Consumer>\r\n","import React from \"react\";\r\nimport \"./VideoPlayer.css\"\r\nimport {ActionContext} from \"../../App\";\r\n\r\nexport const VideoPlayer = () =>\r\n    <ActionContext.Consumer>\r\n        {\r\n            actionState =>\r\n                <div className=\"center\">\r\n                    <div className=\"player\" onClick={() => actionState.addFame()}/>\r\n                </div>\r\n        }\r\n    </ActionContext.Consumer>","import React from \"react\";\r\nimport \"./Counter.css\"\r\nimport {AppContext} from \"../../App\";\r\n\r\nexport const FameCounter = () =>\r\n    <AppContext.Consumer>\r\n        {context => {\r\n            return <div className=\"counter\">\r\n                <p>{Math.floor(context.fame)} Fame</p>\r\n                <p id=\"f_per_second\">{context.famePerSecond.toString().substr(0, 4)} per second</p>\r\n            </div>\r\n        }\r\n\r\n        }\r\n    </AppContext.Consumer>","import React from \"react\";\r\nimport \"./Action.css\"\r\nimport {AppContext, ActionContext, ActionResource} from \"../../App\";\r\n\r\nexport const ActionList = () =>\r\n    <AppContext.Consumer>\r\n        {\r\n            appContext => <>\r\n                <Action resource={appContext.follower}\r\n                        resourceKey={\"follower\"}\r\n                        enabled={appContext.fame >= appContext.follower.cost}/>\r\n                <Action resource={appContext.subscriber}\r\n                        resourceKey={\"subscriber\"}\r\n                        enabled={appContext.fame >= appContext.subscriber.cost}/>\r\n                <Action resource={appContext.embedded}\r\n                        resourceKey={\"embedded\"}\r\n                        enabled={appContext.fame >= appContext.embedded.cost}/>\r\n                <Action resource={appContext.sponsor}\r\n                        resourceKey={\"sponsor\"}\r\n                        enabled={appContext.fame >= appContext.sponsor.cost}/>\r\n            </>\r\n        }\r\n    </AppContext.Consumer>\r\n\r\ninterface ActionProps {\r\n    resource: ActionResource\r\n    resourceKey: string\r\n    enabled: boolean\r\n}\r\n\r\nconst Action = (props: ActionProps) =>\r\n    <ActionContext.Consumer>\r\n        {actionContext => <>\r\n            <div className={`action_box ${props.enabled ? 'enabled' : 'disabled'}`}\r\n                 onClick={() => props.enabled ? actionContext.addFameForAction(props.resourceKey) : null}>\r\n                <div className=\"count\">\r\n                    <span>{props.resource.count}</span>\r\n                </div>\r\n                <div className=\"title\">\r\n                    <span>{props.resource.label}</span>\r\n                </div>\r\n                <div className=\"cost\">\r\n                    <span>{props.resource.cost}</span>\r\n                </div>\r\n            </div>\r\n        </>\r\n        }\r\n    </ActionContext.Consumer>","import React from \"react\";\r\nimport \"./UserInterface.css\"\r\nimport {Header} from \"../header/Header\";\r\nimport {VideoPlayer} from \"./VideoPlayer\";\r\nimport {FameCounter} from \"../counter/Counter\";\r\nimport {ActionList} from \"../action/ActionList\";\r\n\r\nexport const UserInterface = () =>\r\n    <div className=\"user_interface\">\r\n        <Header/>\r\n\r\n        <ActionList/>\r\n        <FameCounter/>\r\n        <VideoPlayer/>\r\n    </div>\r\n\r\n","import React, {Component, useEffect, useState} from 'react';\nimport './App.css';\nimport {UserInterface} from \"./component/user_interface/UserInterface\";\n\n\nconst SAVE_KEY = 'new_state_6';\n\nexport interface ActionResource {\n    label: string;\n    count: number;\n    cost: number;\n    coefficient: number;\n    baseReward: number;\n}\n\nconst nextActionResource = (actionResource: ActionResource) => ({\n    ...actionResource,\n    cost: Math.ceil(actionResource.cost * actionResource.coefficient),\n    count: actionResource.count + 1\n})\n\nexport interface ActionState {\n    save: NodeJS.Timeout\n    addFamePerSec: NodeJS.Timeout\n    addFame: () => void\n    addFameForAction: (resourceName: string) => void\n}\n\nexport interface AppState {\n    streamerName: string\n    fame: number\n    famePerSecond: number\n    subscriber: ActionResource\n    follower: ActionResource\n    embedded: ActionResource\n    sponsor: ActionResource\n    [key: string]: any\n}\n\nconst initialAppState: AppState = {\n    fame: 0,\n    famePerSecond: 0,\n    streamerName: 'GwaDoush',\n    follower: {coefficient: 1.2, cost: 15, count: 0, baseReward: 0.1, label: \"Follower\"},\n    subscriber: {coefficient: 1.15, cost: 100, count: 0, baseReward: 1, label: \"Subscriber\"},\n    embedded: {coefficient: 1.15, cost: 1100, count: 0, baseReward: 8, label: \"Embedded\"},\n    sponsor: {coefficient: 1.15, cost: 12000, count: 0, baseReward: 47, label: \"Sponsor\"}\n}\n\nconst initialActionState: ActionState = {\n    save: setInterval(() => {\n    }, 0),\n    addFamePerSec: setInterval(() => {\n    }, 1000),\n    addFameForAction(resourceName: string): void {\n    },\n    addFame: () => {\n    }\n}\n\nconst loadState = () => {\n    const localStorageState = localStorage.getItem(SAVE_KEY)\n    if (!localStorageState) localStorage.clear()\n    return localStorageState ? {...JSON.parse(localStorageState)} : initialAppState\n}\n\nexport const AppContext = React.createContext<AppState>(initialAppState)\nexport const ActionContext = React.createContext<ActionState>(initialActionState)\n\nclass App extends Component<any, AppState> {\n\n    state = loadState()\n\n    action = {\n        save: setInterval(() => {\n            localStorage.setItem(SAVE_KEY, JSON.stringify(this.state));\n        }, 1000),\n        addFamePerSec: setInterval(() => {\n            this.setState({...this.state, fame: this.state.fame + this.state.famePerSecond / 10})\n        }, 100),\n        addFame: () => {\n            this.setState({...this.state, fame: this.state.fame + 1})\n        },\n        addFameForAction: (resourceKey: string) => {\n            let newState: AppState = {\n                ...this.state,\n                fame: this.state.fame - this.state[resourceKey].cost,\n                famePerSecond: this.state.famePerSecond + this.state[resourceKey].baseReward,\n            }\n            newState[resourceKey] = nextActionResource(this.state[resourceKey])\n            this.setState({...newState})\n        },\n    }\n\n    render = () => <div className=\"App\">\n        <ActionContext.Provider value={this.action}>\n            <AppContext.Provider value={this.state}>\n                <UserInterface/>\n            </AppContext.Provider>\n        </ActionContext.Provider>\n    </div>\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}