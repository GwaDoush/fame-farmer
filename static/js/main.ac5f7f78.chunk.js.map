{"version":3,"sources":["component/header/Header.tsx","component/user_interface/VideoPlayer.tsx","component/counter/Counter.tsx","component/action/ActionList.tsx","component/user_interface/UserInterface.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","AppContext","Consumer","context","className","id","streamerName","toUpperCase","VideoPlayer","ActionContext","actionState","onClick","addFame","FameCounter","Math","floor","fame","famePerSecond","toString","substr","ActionList","actionContext","appContext","addFollower","label","cost","follower","count","enabled","perSec","addSubscriber","subscriber","addEmbedded","embedded","Action","props","RunTimeAction","UserInterface","nextActionResource","actionResource","ceil","coefficient","initialAppState","baseReward","initialActionState","save","setInterval","addFamePerSec","loadState","localStorageState","localStorage","getItem","clear","JSON","parse","React","createContext","App","state","action","setItem","stringify","setState","render","Provider","value","Component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ac5f7f78.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Header.css\"\r\nimport {AppContext} from \"../../App\";\r\n\r\nexport const Header = () =>\r\n    <AppContext.Consumer>\r\n        {(context) => <div className=\"header\">\r\n            <span id=\"title\">{context.streamerName.toUpperCase()}</span>\r\n        </div>\r\n        }\r\n    </AppContext.Consumer>\r\n","import React from \"react\";\r\nimport \"./VideoPlayer.css\"\r\nimport {ActionContext} from \"../../App\";\r\n\r\nexport const VideoPlayer = () =>\r\n    <ActionContext.Consumer>\r\n        {\r\n            actionState =>\r\n                <div className=\"center\">\r\n                    <div className=\"player\" onClick={() => actionState.addFame()}/>\r\n                </div>\r\n        }\r\n    </ActionContext.Consumer>","import React from \"react\";\r\nimport \"./Counter.css\"\r\nimport {AppContext} from \"../../App\";\r\n\r\nexport const FameCounter = () =>\r\n    <AppContext.Consumer>\r\n        {context => {\r\n            return <div className=\"counter\">\r\n                <p>{Math.floor(context.fame)} Fame</p>\r\n                <p id=\"f_per_second\">{context.famePerSecond.toString().substr(0, 4)} per second</p>\r\n            </div>\r\n        }\r\n\r\n        }\r\n    </AppContext.Consumer>","import React from \"react\";\r\nimport \"./Action.css\"\r\nimport {AppContext, ActionContext} from \"../../App\";\r\n\r\nexport const ActionList = () => {\r\n    return <ActionContext.Consumer>\r\n        {actionContext =>\r\n            <AppContext.Consumer>\r\n                {\r\n                    appContext => <>\r\n                        <RunTimeAction onClick={actionContext.addFollower}\r\n                                label={\"Follower\"}\r\n                                cost={appContext.follower.cost}\r\n                                count={appContext.follower.count}\r\n                                enabled={appContext.fame >= appContext.follower.cost} perSec={actionContext.addFame}/>\r\n                        <Action onClick={actionContext.addSubscriber}\r\n                                label={\"Subscriber\"}\r\n                                cost={appContext.subscriber.cost}\r\n                                count={appContext.subscriber.count}\r\n                                enabled={appContext.fame >= appContext.subscriber.cost}/>\r\n                        <Action onClick={actionContext.addEmbedded}\r\n                                label={\"Embedded\"}\r\n                                cost={appContext.embedded.cost}\r\n                                count={appContext.embedded.count}\r\n                                enabled={appContext.fame >= appContext.embedded.cost}/>\r\n                    </>\r\n                }\r\n            </AppContext.Consumer>\r\n        }\r\n    </ActionContext.Consumer>\r\n\r\n}\r\n\r\ninterface ActionProps {\r\n    label: string\r\n    count: number\r\n    cost: number\r\n    enabled: boolean\r\n    onClick: () => void\r\n}\r\n\r\ninterface ActionRunTimeProps {\r\n    label: string\r\n    count: number\r\n    cost: number\r\n    enabled: boolean\r\n    onClick: () => void\r\n    perSec: (count: number) => void\r\n}\r\n\r\nconst Action = (props: ActionProps) =>\r\n    <div className={`action_box ${props.enabled ? 'enabled' : 'disabled'}`}\r\n         onClick={() => (props.enabled) ? props.onClick() : null}>\r\n        <div className=\"count\">\r\n            <span>{props.count}</span>\r\n        </div>\r\n        <div className=\"title\">\r\n            <span>{props.label}</span>\r\n        </div>\r\n        <div className=\"cost\">\r\n            <span>{props.cost}</span>\r\n        </div>\r\n    </div>\r\n\r\nconst RunTimeAction = (props: ActionRunTimeProps) => {\r\n    return <div className={`action_box ${props.enabled ? 'enabled' : 'disabled'}`}\r\n                onClick={() => (props.enabled) ? props.onClick() : null}>\r\n        <div className=\"count\">\r\n            <span>{props.count}</span>\r\n        </div>\r\n        <div className=\"title\">\r\n            <span>{props.label}</span>\r\n        </div>\r\n        <div className=\"cost\">\r\n            <span>{props.cost}</span>\r\n        </div>\r\n    </div>;\r\n}","import React from \"react\";\r\nimport \"./UserInterface.css\"\r\nimport {Header} from \"../header/Header\";\r\nimport {VideoPlayer} from \"./VideoPlayer\";\r\nimport {FameCounter} from \"../counter/Counter\";\r\nimport {ActionList} from \"../action/ActionList\";\r\n\r\nexport const UserInterface = () =>\r\n    <div className=\"user_interface\">\r\n        <Header/>\r\n\r\n        <ActionList/>\r\n        <FameCounter/>\r\n        <VideoPlayer/>\r\n    </div>\r\n\r\n","import React, {Component, useEffect, useState} from 'react';\nimport './App.css';\nimport {UserInterface} from \"./component/user_interface/UserInterface\";\n\n\nconst SAVE_KEY = 'new_state_2';\n\nexport interface ActionResource {\n    count: number;\n    cost: number;\n    coefficient: number;\n    baseReward: number;\n}\n\nconst nextActionResource = (actionResource: ActionResource) => ({\n    ...actionResource,\n    cost: Math.ceil(actionResource.cost * actionResource.coefficient),\n    count: actionResource.count + 1\n})\n\nexport interface ActionState {\n    save: NodeJS.Timeout\n    addFamePerSec: NodeJS.Timeout\n    addFame: () => void\n    addSubscriber: () => void\n    addFollower: () => void\n    addEmbedded: () => void\n}\n\nexport interface AppState {\n    streamerName: string\n    fame: number\n    famePerSecond: number\n    subscriber: ActionResource\n    follower: ActionResource\n    embedded: ActionResource\n}\n\nconst initialAppState: AppState = {\n    fame: 0,\n    famePerSecond: 0,\n    streamerName: 'GwaDoush',\n    follower: {coefficient: 1.07, cost: 10, count: 0, baseReward: 1},\n    subscriber: {coefficient: 1.10, cost: 20, count: 0, baseReward: 0.5},\n    embedded: {coefficient: 1.13, cost: 5000, count: 0, baseReward: 200}\n}\n\nconst initialActionState: ActionState = {\n    save: setInterval(() => {\n    }, 0),\n    addFamePerSec: setInterval(() => {\n    }, 1000),\n    addSubscriber: () => {\n    },\n    addFame: () => {\n    },\n    addFollower: () => {\n    },\n    addEmbedded: () => {\n    }\n}\n\nconst loadState = () => {\n    const localStorageState = localStorage.getItem(SAVE_KEY)\n    if (!localStorageState) localStorage.clear()\n    return localStorageState ? {...JSON.parse(localStorageState)} : initialAppState\n}\n\nexport const AppContext = React.createContext<AppState>(initialAppState)\nexport const ActionContext = React.createContext<ActionState>(initialActionState)\n\nclass App extends Component<any, AppState> {\n\n    state = loadState()\n\n    action = {\n        save: setInterval(() => {\n            localStorage.setItem(SAVE_KEY, JSON.stringify(this.state));\n        }, 1000),\n        addFamePerSec: setInterval(() => {\n            this.setState({...this.state, fame: this.state.fame + this.state.famePerSecond / 10})\n        }, 100),\n        addSubscriber: () => {\n            this.setState({\n                ...this.state,\n                fame: this.state.fame - this.state.subscriber.cost,\n                famePerSecond: this.state.famePerSecond + this.state.subscriber.baseReward,\n                subscriber: nextActionResource(this.state.subscriber)\n            })\n        },\n        addFame: () => {\n            this.setState({...this.state, fame: this.state.fame + 1 + this.state.follower.count})\n        },\n        addFollower: () => {\n            this.setState({\n                ...this.state,\n                fame: this.state.fame - this.state.follower.cost,\n                follower: nextActionResource(this.state.follower)\n            })\n        },\n        addEmbedded: () => {\n            this.setState({\n                ...this.state,\n                famePerSecond: this.state.famePerSecond + this.state.embedded.baseReward,\n                embedded: nextActionResource(this.state.embedded)\n            })\n        }\n    }\n\n    render = () => <div className=\"App\">\n        <ActionContext.Provider value={this.action}>\n            <AppContext.Provider value={this.state}>\n                <UserInterface/>\n            </AppContext.Provider>\n        </ActionContext.Provider>\n    </div>\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}